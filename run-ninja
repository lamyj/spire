#!/usr/bin/env python

from __future__ import print_function
import argparse
import imp
import os
import subprocess
import sys
import tempfile

import ninja

def main():
    parser = argparse.ArgumentParser(description="Run Ninja from a steps module")
    parser.add_argument("module", help="Path to module")
    parser.add_argument("targets", nargs="*", metavar="target")
    parser.add_argument(
        "--output", "-o", help="Output path of the build.ninja")
    parser.add_argument(
        "--graph", "-g", 
        help="Generate a PDF of the targets graph (requires Graphviz)")
    arguments = parser.parse_args()
    
    with open(arguments.module, "rb") as fd:
        module = imp.load_module(
            "steps", fd, arguments.module, 
            (os.path.splitext(arguments.module)[1], "rb", imp.PY_SOURCE))
    
    if arguments.output is None:
        fd, ninja_file = tempfile.mkstemp()
        os.close(fd)
    else:
        ninja_file = arguments.output
    
    write_ninja(open(ninja_file, "w"), module.steps)
    
    if arguments.graph is not None:
        returncode = graph(arguments, ninja_file)
    else:
        returncode = run(arguments, ninja_file, module)
    
    return returncode

def write_ninja(fd, steps):
    writer = ninja.Writer(fd)
    
    for step in steps:
        if isinstance(step, ninja.Rule):
            writer.rule(step.name, step.command, step.description)
        if isinstance(step, ninja.Build):
            writer.build(step.outputs, step.rule, step.inputs, variables=step.variables)

    writer.close()

def run(arguments, ninja_file, module):
    returncode = 0
    try:
        subprocess.check_call([
             "ninja", "-v", "-d", "explain", "-j", "1", 
             "-f", ninja_file, "-C", module.root]+arguments.targets)
    except subprocess.CalledProcessError as e:
        returncode = e.returncode
    finally:
        if arguments.output is None:
            os.remove(ninja_file)
    
    return returncode

def graph(arguments, ninja_file):
    ninja_graph = subprocess.Popen(
        ["ninja", "-f", ninja_file, "-t", "graph"]+arguments.targets,
        stdout=subprocess.PIPE
    )
    dot = subprocess.Popen(
        ["dot", "-T", "pdf", "-o", arguments.graph],
        stdin=ninja_graph.stdout)
    ninja_graph.stdout.close()
    
    dot.communicate()
    ninja_graph.poll()
    
    return max(ninja_graph.returncode, dot.returncode)

if __name__ == "__main__":
    sys.exit(main())
