#!/usr/bin/env python

from __future__ import print_function
import argparse
import glob
import json
import os
import StringIO
import subprocess
import sys

import jinja2
import yaml

import ninja

def main():
    
    (
        arguments, jinja_arguments, 
        raw_ninja_arguments, known_ninja_arguments
    ) = parse_arguments()
    
    environment = get_jinja_environment(arguments, known_ninja_arguments)
    
    template = environment.get_template(arguments.pipeline)
    rendered = template.render(**jinja_arguments)
    pipeline = yaml.load(rendered)
    # print(pipeline["steps"][-7]["recipe"])
    # return
    
    ninja_file = render_ninja(pipeline)
    # print(ninja_file)
    
    process = subprocess.Popen(
        ["ninja", "-f", "/dev/stdin"]+raw_ninja_arguments, 
        stdin=subprocess.PIPE)
    process.communicate(ninja_file)
    
    return process.returncode

def parse_arguments():
    """ Return the runner-specific, Jinja-specific and Ninja-specific (both raw
        and known) arguments parsed from the command line.
    """
    
    jinja_parser = argparse.ArgumentParser(
        description="Run Ninja from a pipeline description")
    jinja_parser.add_argument("pipeline", help="Path to pipeline description")
    jinja_parser.add_argument(
        "variables", nargs="*", 
        metavar="variable", help="Jinja variables (name=value)")
    
    main_parser = argparse.ArgumentParser(
        description="Run Ninja from a pipeline description",
        usage=jinja_parser.format_usage().strip()+" [-- ninja-option [ninja-option ...]]")
    main_parser.add_argument("pipeline", help="Path to pipeline description")
    main_parser.add_argument(
        "variables", nargs="*", 
        metavar="variable", help="Jinja variables (name=value)")
    
    if "--" in sys.argv:
        limit = sys.argv.index("--")
        arguments = main_parser.parse_args(sys.argv[1:limit])
        raw_ninja_arguments = sys.argv[1+limit:]
    else:
        arguments = main_parser.parse_args()
        raw_ninja_arguments = []
    
    try:
        jinja_arguments = {
            x.split("=", 1)[0]: x.split("=", 1)[1] 
            for x in arguments.variables}
    except Exception as e:
        main_parser.error(e)
    
    ninja_parser = argparse.ArgumentParser()
    ninja_parser.add_argument("--directory", "-C", default=os.getcwd())
    known_ninja_arguments, _ = ninja_parser.parse_known_args(raw_ninja_arguments)
    if known_ninja_arguments.directory:
        # Make sure it ends with a "/"
        known_ninja_arguments.directory = os.path.join(
            known_ninja_arguments.directory, "")
    
    return arguments, jinja_arguments, raw_ninja_arguments, known_ninja_arguments

def get_jinja_environment(arguments, known_ninja_arguments): 
    """Return the Jinja environment."""
    
    loader = jinja2.FileSystemLoader([
        "/",
        os.path.abspath(os.path.dirname(arguments.pipeline)),
        os.path.abspath(os.path.dirname(__file__)),
    ])
       
    environment = jinja2.Environment(loader=loader, keep_trailing_newline=True)
    environment.globals.update(
        glob=lambda x: sorted(
            x[len(known_ninja_arguments.directory):] for x in 
            glob.glob(os.path.join(known_ninja_arguments.directory, x)))
    )
    environment.filters["json"] = lambda x: json.dumps(x)
    environment.filters["yaml"] = lambda x: yaml.dump(x, default_flow_style=False)
    
    return environment

def render_ninja(pipeline):
    """Render the Ninja file."""
    fd = StringIO.StringIO()
    writer = ninja.Writer(fd)
    
    for index, step in enumerate(pipeline.get("steps", [])):
        rule_name = step.get("id", "step_{}".format(1+index))
        
        if step.get("phony"):
            writer.build(step["targets"], "phony", step["prerequisites"])
        else: 
            recipe = step["recipe"]
            if isinstance(recipe, basestring):
                recipe = [recipe]
            # User need not know we are using ninja: escape the $
            recipe = [x.replace("$", "$$") for x in recipe]
            
            writer.rule(rule_name, " ; ".join(recipe))
            writer.build(step["targets"], rule_name, step["prerequisites"])

    data = fd.getvalue()
    writer.close()
    
    return data

if __name__ == "__main__":
    sys.exit(main())
